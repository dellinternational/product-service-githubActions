name: Deploy Spring Boot App to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: product-service-gitgubactions
      ACR_LOGIN_SERVER: acrsuhi.azurecr.io  # replace with your ACR login server
      RESOURCE_GROUP: Prod-rg
      CLUSTER_NAME: prod-aks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Spring Boot app
      run: mvn clean package -DskipTests

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.RESOURCE_GROUP }}

    - name: Azure Container Registry Login
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    - name: Build and Push Docker image
      run: |
        docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest

    - name: Set AKS Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: "Prod-rg"
        cluster-name: "prod-aks"

    - name: Deploy to AKS using kubectl
      uses: Azure/k8s-deploy@v4
      with:
        manifests: |
         manifests/postgres-service.yaml
         manifests/postgres-deployment.yaml
         manifests/product-service.yaml
         manifests/product-deployment.yaml
         manifests/ingress.yaml
        images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
